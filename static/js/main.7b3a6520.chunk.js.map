{"version":3,"sources":["component/Console.tsx","logic/MIDIManager.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","root","padding","color","backgroundColor","fontFamily","fontSize","label","Console","props","classes","TextField","inputProps","className","InputLabelProps","multiline","rows","fullWidth","value","history","join","MIDIManager","setHistory","events","devices","this","window","navigator","requestMIDIAccess","then","onSuccess","bind","onError","event","push","data","message","iterator","inputs","values","input","next","done","name","addEventListener","onEvent","Object","keys","length","App","useState","isMIDIManagerInitialized","setIsMIDIManagerInitialized","useEffect","midiManager","document","altKey","key","ctrlKey","clearHistory","Container","maxWidth","style","textAlign","href","ReactDOM","render","CssBaseline","querySelector"],"mappings":"wMAKMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,QAAS,WACTC,MAAO,OACPC,gBAAiB,OACjBC,WAAY,YACZC,SAAU,IAEZC,MAAO,KAOM,SAASC,EAAQC,GAC9B,IAAMC,EAAUX,IAEhB,OACE,8BACE,cAACY,EAAA,EAAD,CACEC,WAAY,CAACC,UAAWH,EAAQT,MAAOa,gBAAiB,CAACD,UAAWH,EAAQT,MAC5Ec,WAAW,EAAMC,KAAM,GAAIC,WAAW,EACtCC,MAAOT,EAAMU,QAAQC,KAAK,U,oBC5BbC,E,WAuCnB,WAAYC,GAAoC,yBAtChDC,OAAmB,GAsC4B,KArC/CC,QAAgC,GAqCe,KApC/CF,gBAoC+C,EAC7CG,KAAKH,WAAaA,EAEbI,OAAOC,UAAkBC,kBAC3BF,OAAOC,UACPC,oBACAC,KAAKJ,KAAKK,UAAUC,KAAKN,MAAOA,KAAKO,QAAQD,KAAKN,OAEnDA,KAAKO,QAAQ,iC,2DAzCfP,KAAKF,OAAS,GACdE,KAAKH,WAAWG,KAAKF,U,8BAEfU,GACNR,KAAKF,OAAOW,KAAKD,EAAME,KAAKf,KAAK,OAEjCK,KAAKH,WAAWG,KAAKF,U,8BAEfa,GACNX,KAAKH,WAAW,CACd,gCACA,yDACA,yD,gCAGMa,GAGR,IAFA,IAAME,EAAWF,EAAKG,OAAOC,SAEpBC,EAAQH,EAASI,QAASD,EAAME,KAAMF,EAAQH,EAASI,OAChEhB,KAAKF,OAAOW,KAAZ,UAAoBM,EAAMtB,MAAMyB,KAAhC,mBACAlB,KAAKH,WAAWG,KAAKF,QAEnBE,KAAKD,QAAQgB,EAAMtB,MAAMyB,MAAQH,EAAMtB,MACvCsB,EAAMtB,MAAM0B,iBAAiB,cAAenB,KAAKoB,QAAQd,KAAKN,OAAO,GAE9B,IAArCqB,OAAOC,KAAKtB,KAAKD,SAASwB,QAC5BvB,KAAKF,OAAOW,KAAK,mBACjBT,KAAKH,WAAWG,KAAKF,UAErBE,KAAKF,OAAOW,KAAK,IACjBT,KAAKF,OAAOW,KAAK,8B,KC7BR,SAASe,IAAO,IAAD,EACEC,mBAAS,IADX,mBACrB/B,EADqB,KACZG,EADY,OAEoC4B,oBAAS,GAF7C,mBAErBC,EAFqB,KAEKC,EAFL,KAuB5B,OAnBAC,qBAAU,WACR,IAAIC,EAAc,IAAIjC,EAAYC,GAElCI,OAAO6B,SAASX,iBAAiB,WAAW,SAACX,GAEtCA,EAAMuB,QAAwB,MAAdvB,EAAMwB,KAItBxB,EAAMyB,SAAyB,MAAdzB,EAAMwB,KAI5BH,EAAYK,kBACX,GAEHP,GAA4B,KAC3B,CAACD,IAGF,8BACE,eAACS,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,gDACA,uCAAS,0CAAT,OAAgC,yCAAhC,wBACA,cAACrD,EAAD,CAASW,QAASA,IAClB,mBAAG2C,MAAO,CAACC,UAAW,UAAtB,SAAiC,mBAAGC,KAAK,4CAAR,mCC7BzCC,IAASC,OACP,gCAEE,cAACC,EAAA,EAAD,IACA,cAAClB,EAAD,OAEFM,SAASa,cAAc,Y","file":"static/js/main.7b3a6520.chunk.js","sourcesContent":["import React from 'react';\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles({\n  root: {\n    padding: \"8pt 16pt\",\n    color: \"#EEE\",\n    backgroundColor: \"#333\",\n    fontFamily: \"Monospace\",\n    fontSize: 16\n  },\n  label: {},\n});\n\ninterface ConsoleProps {\n  history: string[];\n}\n\nexport default function Console(props: ConsoleProps) {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <TextField\n        inputProps={{className: classes.root}} InputLabelProps={{className: classes.root}}\n        multiline={true} rows={16} fullWidth={true}\n        value={props.history.join(\"\\n\")}\n      />\n    </div>\n  );\n}\n","export default class MIDIManager {\n  events: string[] = [];\n  devices: {[key: string]: any} = {};\n  setHistory: (v: string[]) => void;\n\n  clearHistory() {\n    this.events = [];\n    this.setHistory(this.events);\n  }\n  onEvent(event: any) {\n    this.events.push(event.data.join(\"\\t\"));\n\n    this.setHistory(this.events);\n  }\n  onError(message: any) {\n    this.setHistory([\n      \"Failed to setup MIDI devices.\",\n      \"Are you using the browser which supports Web MIDI API?\",\n      \"The latest Google Chrome is a recommended browser.\",\n    ]);\n  }\n  onSuccess(data: any) {\n    const iterator = data.inputs.values();\n\n    for (let input = iterator.next(); !input.done; input = iterator.next()) {\n    this.events.push(`${input.value.name} ... connected`);\n    this.setHistory(this.events);\n\n      this.devices[input.value.name] = input.value;\n      input.value.addEventListener(\"midimessage\", this.onEvent.bind(this), false);\n    }\n    if (Object.keys(this.devices).length === 0) {\n      this.events.push(\"No MIDI devices\");\n      this.setHistory(this.events);\n    } else {\n      this.events.push(\"\");\n      this.events.push(\"Event\\tVal. 1\\tVal. 2\")\n    }\n  }\n  constructor(setHistory: (v: string[]) => void) {\n    this.setHistory = setHistory;\n\n    if ((window.navigator as any).requestMIDIAccess) {\n      (window.navigator as any)\n      .requestMIDIAccess()\n      .then(this.onSuccess.bind(this), this.onError.bind(this));\n    } else {\n      this.onError(\"failed to access MIDI devices\");\n    }\n  }\n}\n","import React, {useState, useEffect} from 'react';\n\nimport Container from '@material-ui/core/Container';\nimport Console from './component/Console';\n\nimport MIDIManager from './logic/MIDIManager';\n\nexport default function App() {\n  const [history, setHistory] = useState([] as string[]) as [string[], (v: string[]) => void];\n  const [isMIDIManagerInitialized, setIsMIDIManagerInitialized] = useState(false);\n\n  useEffect(() => {\n    let midiManager = new MIDIManager(setHistory);\n\n    window.document.addEventListener(\"keydown\", (event: any) => {\n      // For Windows\n      if (!event.altKey || event.key !== \"k\") {\n        return;\n      }\n      // For macOS\n      if (!event.ctrlKey || event.key !== \"k\") {\n        return\n      }\n\n      midiManager.clearHistory();\n    }, false);\n\n    setIsMIDIManagerInitialized(true);\n  }, [isMIDIManagerInitialized]);\n\n  return (\n    <div>\n      <Container maxWidth=\"sm\">\n        <h1>Web MIDI Debug</h1>\n        <p>Press <code>Ctrl-K</code> or <code>Alt-K</code> to clear outputs.</p>\n        <Console history={history}/>\n        <p style={{textAlign: \"center\"}}><a href=\"https://github.com/moutend/web-midi-debug\">View on GitHub</a></p>\n      </Container>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport App from './App';\n\nReactDOM.render(\n  <div>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </div>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}